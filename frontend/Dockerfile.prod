# BusFeed Frontend - Dockerfile de Produção
# Multi-stage: Build React + Nginx otimizado

# Stage 1: Build da aplicação React
FROM node:18-alpine as build

# Definir diretório de trabalho
WORKDIR /app

# Copiar package.json e package-lock.json
COPY package*.json ./

# Instalar dependências
RUN npm ci --only=production

# Copiar código da aplicação
COPY . .

# Configurar variáveis de ambiente para produção
ENV NODE_ENV=production
ENV REACT_APP_API_URL=/api

# Build da aplicação para produção
RUN npm run build

# Stage 2: Nginx para servir arquivos estáticos
FROM nginx:alpine as production

# Copiar configuração customizada do nginx
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copiar build da aplicação React
COPY --from=build /app/build /usr/share/nginx/html

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S nginx_group && \
    adduser -S nginx_user -u 1001

# Ajustar permissões
RUN chown -R nginx_user:nginx_group /usr/share/nginx/html && \
    chown -R nginx_user:nginx_group /var/cache/nginx && \
    chown -R nginx_user:nginx_group /var/log/nginx && \
    chown -R nginx_user:nginx_group /etc/nginx/conf.d

# Criar diretórios de runtime
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    mkdir -p /var/cache/nginx/fastcgi_temp && \
    mkdir -p /var/cache/nginx/uwsgi_temp && \
    mkdir -p /var/cache/nginx/scgi_temp && \
    chown -R nginx_user:nginx_group /var/cache/nginx

# Expor porta
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Comando padrão
CMD ["nginx", "-g", "daemon off;"] 