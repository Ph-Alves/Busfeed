"""
Comando para popular o banco de dados com dados mock para desenvolvimento

Este comando cria dados de teste representativos do sistema de transporte
p√∫blico do Distrito Federal, incluindo paradas, linhas e relacionamentos.
"""

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import timezone
from decimal import Decimal
import logging

from paradas.models import Parada, TipoParada
from linhas.models import Linha, LinhaParada, TipoLinha, StatusLinha


logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Popula o banco de dados com dados mock para desenvolvimento'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limpar',
            action='store_true',
            help='Limpa todos os dados existentes antes de popular'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Exibe informa√ß√µes detalhadas durante a execu√ß√£o'
        )

    def handle(self, *args, **options):
        """Executa o comando de popula√ß√£o de dados"""
        
        if options['verbose']:
            self.stdout.write(
                self.style.SUCCESS('üöå Iniciando popula√ß√£o de dados mock do BusFeed...')
            )

        try:
            with transaction.atomic():
                # Limpa dados existentes se solicitado
                if options['limpar']:
                    self._limpar_dados(options['verbose'])
                
                # Cria dados mock
                paradas = self._criar_paradas_mock(options['verbose'])
                linhas = self._criar_linhas_mock(options['verbose'])
                self._criar_relacionamentos_mock(paradas, linhas, options['verbose'])
                
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Dados mock criados com sucesso!')
                )
                self._exibir_estatisticas(options['verbose'])
                
        except Exception as e:
            logger.error(f"Erro ao popular dados mock: {e}")
            raise CommandError(f'Erro ao popular dados: {e}')

    def _limpar_dados(self, verbose=False):
        """Remove todos os dados existentes"""
        if verbose:
            self.stdout.write('üßπ Limpando dados existentes...')
        
        # Remove relacionamentos primeiro (devido √†s foreign keys)
        LinhaParada.objects.all().delete()
        Linha.objects.all().delete()
        Parada.objects.all().delete()
        
        if verbose:
            self.stdout.write('‚úÖ Dados limpos com sucesso')

    def _criar_paradas_mock(self, verbose=False):
        """Cria paradas mock baseadas em locais reais do DF"""
        if verbose:
            self.stdout.write('üìç Criando paradas mock...')
        
        paradas_data = [
            # Terminais principais
            {
                'codigo_dftrans': 'T001',
                'nome': 'Terminal Rodovi√°rio do Plano Piloto',
                'descricao': 'Terminal central de √¥nibus do Plano Piloto',
                'latitude': -15.7942,
                'longitude': -47.8822,
                'endereco': 'Eixo Monumental, Bras√≠lia - DF',
                'tipo': TipoParada.TERMINAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 5000,
                'pontos_referencia': 'Pr√≥ximo ao Shopping Conjunto Nacional, Torre de TV'
            },
            {
                'codigo_dftrans': 'T002',
                'nome': 'Terminal Ceil√¢ndia Centro',
                'descricao': 'Terminal principal da Ceil√¢ndia',
                'latitude': -15.8267,
                'longitude': -48.1089,
                'endereco': 'QNM 13, Ceil√¢ndia Norte - DF',
                'tipo': TipoParada.TERMINAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 3500,
                'pontos_referencia': 'Centro da Ceil√¢ndia, pr√≥ximo ao com√©rcio'
            },
            {
                'codigo_dftrans': 'T003',
                'nome': 'Terminal Taguatinga',
                'descricao': 'Terminal de √¥nibus de Taguatinga',
                'latitude': -15.8311,
                'longitude': -48.0428,
                'endereco': 'Pist√£o Sul, Taguatinga - DF',
                'tipo': TipoParada.TERMINAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 4000,
                'pontos_referencia': 'Centro de Taguatinga, Shopping Taguatinga'
            },
            {
                'codigo_dftrans': 'T004',
                'nome': 'Terminal Samambaia',
                'descricao': 'Terminal de √¥nibus de Samambaia',
                'latitude': -15.8756,
                'longitude': -48.0844,
                'endereco': 'QS 318, Samambaia Sul - DF',
                'tipo': TipoParada.TERMINAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 2800,
                'pontos_referencia': 'Centro de Samambaia'
            },
            {
                'codigo_dftrans': 'T005',
                'nome': 'Terminal Gama',
                'descricao': 'Terminal de √¥nibus do Gama',
                'latitude': -16.0189,
                'longitude': -48.0644,
                'endereco': 'Setor Central, Gama - DF',
                'tipo': TipoParada.TERMINAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 2200,
                'pontos_referencia': 'Centro do Gama'
            },
            
            # Esta√ß√µes de Metr√¥
            {
                'codigo_dftrans': 'M001',
                'nome': 'Esta√ß√£o Central - Metr√¥',
                'descricao': 'Esta√ß√£o Central do Metr√¥ de Bras√≠lia',
                'latitude': -15.7801,
                'longitude': -47.8825,
                'endereco': 'Eixo Monumental, Bras√≠lia - DF',
                'tipo': TipoParada.METRO,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 8000,
                'pontos_referencia': 'Rodovi√°ria do Plano Piloto, Shopping Conjunto Nacional'
            },
            {
                'codigo_dftrans': 'M002',
                'nome': 'Esta√ß√£o Ceil√¢ndia Centro - Metr√¥',
                'descricao': 'Esta√ß√£o de metr√¥ da Ceil√¢ndia Centro',
                'latitude': -15.8195,
                'longitude': -48.1067,
                'endereco': 'QNN 102, Ceil√¢ndia Norte - DF',
                'tipo': TipoParada.METRO,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 6000,
                'pontos_referencia': 'Centro da Ceil√¢ndia, Hospital Regional'
            },
            {
                'codigo_dftrans': 'M003',
                'nome': 'Esta√ß√£o Taguatinga Centro - Metr√¥',
                'descricao': 'Esta√ß√£o de metr√¥ de Taguatinga Centro',
                'latitude': -15.8289,
                'longitude': -48.0456,
                'endereco': 'Pist√£o Sul, Taguatinga - DF',
                'tipo': TipoParada.METRO,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 5500,
                'pontos_referencia': 'Centro de Taguatinga'
            },
            
            # Shoppings
            {
                'codigo_dftrans': 'S001',
                'nome': 'Shopping Conjunto Nacional',
                'descricao': 'Parada em frente ao Shopping Conjunto Nacional',
                'latitude': -15.7899,
                'longitude': -47.8919,
                'endereco': 'SDS, Asa Sul, Bras√≠lia - DF',
                'tipo': TipoParada.SHOPPING,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 2500,
                'pontos_referencia': 'Shopping Conjunto Nacional, Torre de TV'
            },
            {
                'codigo_dftrans': 'S002',
                'nome': 'Shopping Ceil√¢ndia',
                'descricao': 'Parada pr√≥xima ao Shopping Ceil√¢ndia',
                'latitude': -15.8245,
                'longitude': -48.1125,
                'endereco': 'QNM 11, Ceil√¢ndia Norte - DF',
                'tipo': TipoParada.SHOPPING,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 1800,
                'pontos_referencia': 'Shopping Ceil√¢ndia, Terminal Ceil√¢ndia'
            },
            {
                'codigo_dftrans': 'S003',
                'nome': 'Shopping Bras√≠lia',
                'descricao': 'Parada do Shopping Bras√≠lia',
                'latitude': -15.7544,
                'longitude': -47.8889,
                'endereco': 'SCN Q 5, Asa Norte - DF',
                'tipo': TipoParada.SHOPPING,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 2200,
                'pontos_referencia': 'Shopping Bras√≠lia, Setor Comercial Norte'
            },
            
            # Hospitais
            {
                'codigo_dftrans': 'H001',
                'nome': 'Hospital Regional da Asa Norte',
                'descricao': 'Parada do Hospital Regional da Asa Norte',
                'latitude': -15.7654,
                'longitude': -47.8789,
                'endereco': 'SMHN Q 101, Asa Norte - DF',
                'tipo': TipoParada.HOSPITAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 1200,
                'pontos_referencia': 'Hospital Regional, Asa Norte'
            },
            {
                'codigo_dftrans': 'H002',
                'nome': 'Hospital Regional de Ceil√¢ndia',
                'descricao': 'Parada do Hospital Regional de Ceil√¢ndia',
                'latitude': -15.8178,
                'longitude': -48.1089,
                'endereco': 'QNM 28, Ceil√¢ndia Norte - DF',
                'tipo': TipoParada.HOSPITAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 900,
                'pontos_referencia': 'Hospital Regional de Ceil√¢ndia'
            },
            
            # Universidades
            {
                'codigo_dftrans': 'U001',
                'nome': 'Universidade de Bras√≠lia - Campus Darcy Ribeiro',
                'descricao': 'Parada principal da UnB',
                'latitude': -15.7633,
                'longitude': -47.8689,
                'endereco': 'Campus Universit√°rio Darcy Ribeiro, Asa Norte - DF',
                'tipo': TipoParada.EDUCACAO,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 3500,
                'pontos_referencia': 'Universidade de Bras√≠lia, ICC'
            },
            
            # Aeroporto
            {
                'codigo_dftrans': 'A001',
                'nome': 'Aeroporto Internacional de Bras√≠lia',
                'descricao': 'Terminal de passageiros do aeroporto',
                'latitude': -15.8711,
                'longitude': -47.9178,
                'endereco': 'Lago Sul, Bras√≠lia - DF',
                'tipo': TipoParada.AEROPORTO,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 1500,
                'pontos_referencia': 'Aeroporto Internacional de Bras√≠lia'
            },
            
            # Paradas principais nas cidades sat√©lites
            {
                'codigo_dftrans': 'P001',
                'nome': 'Setor Comercial Sul - Quadra 2',
                'descricao': 'Parada no Setor Comercial Sul',
                'latitude': -15.7967,
                'longitude': -47.8944,
                'endereco': 'SCS Q 2, Asa Sul - DF',
                'tipo': TipoParada.PRINCIPAL,
                'tem_acessibilidade': False,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 800,
                'pontos_referencia': 'Setor Comercial Sul, pr√≥ximo ao centro'
            },
            {
                'codigo_dftrans': 'P002',
                'nome': 'Setor Banc√°rio Sul',
                'descricao': 'Parada no Setor Banc√°rio Sul',
                'latitude': -15.7989,
                'longitude': -47.8856,
                'endereco': 'SBS Q 1, Asa Sul - DF',
                'tipo': TipoParada.PRINCIPAL,
                'tem_acessibilidade': True,
                'tem_cobertura': True,
                'tem_banco': True,
                'movimento_estimado': 1200,
                'pontos_referencia': 'Setor Banc√°rio Sul, bancos'
            },
            {
                'codigo_dftrans': 'P003',
                'nome': 'Quadra 102 Norte',
                'descricao': 'Parada na Asa Norte - Quadra 102',
                'latitude': -15.7511,
                'longitude': -47.8822,
                'endereco': 'SQN 102, Asa Norte - DF',
                'tipo': TipoParada.SECUNDARIA,
                'tem_acessibilidade': False,
                'tem_cobertura': True,
                'tem_banco': False,
                'movimento_estimado': 400,
                'pontos_referencia': 'Residencial Asa Norte'
            },
            {
                'codigo_dftrans': 'P004',
                'nome': 'Quadra 308 Sul',
                'descricao': 'Parada na Asa Sul - Quadra 308',
                'latitude': -15.8133,
                'longitude': -47.8822,
                'endereco': 'SQS 308, Asa Sul - DF',
                'tipo': TipoParada.SECUNDARIA,
                'tem_acessibilidade': False,
                'tem_cobertura': True,
                'tem_banco': False,
                'movimento_estimado': 350,
                'pontos_referencia': 'Residencial Asa Sul'
            },
            {
                'codigo_dftrans': 'P005',
                'nome': 'QNM 36 - Ceil√¢ndia Norte',
                'descricao': 'Parada residencial na Ceil√¢ndia Norte',
                'latitude': -15.8089,
                'longitude': -48.1156,
                'endereco': 'QNM 36, Ceil√¢ndia Norte - DF',
                'tipo': TipoParada.SECUNDARIA,
                'tem_acessibilidade': False,
                'tem_cobertura': False,
                'tem_banco': False,
                'movimento_estimado': 200,
                'pontos_referencia': '√Årea residencial Ceil√¢ndia Norte'
            },
            {
                'codigo_dftrans': 'P006',
                'nome': 'QNL 15 - Taguatinga Norte',
                'descricao': 'Parada residencial em Taguatinga Norte',
                'latitude': -15.8178,
                'longitude': -48.0511,
                'endereco': 'QNL 15, Taguatinga Norte - DF',
                'tipo': TipoParada.SECUNDARIA,
                'tem_acessibilidade': False,
                'tem_cobertura': True,
                'tem_banco': False,
                'movimento_estimado': 180,
                'pontos_referencia': '√Årea residencial Taguatinga Norte'
            }
        ]
        
        paradas_criadas = []
        for parada_data in paradas_data:
            parada, created = Parada.objects.get_or_create(
                codigo_dftrans=parada_data['codigo_dftrans'],
                defaults=parada_data
            )
            paradas_criadas.append(parada)
            
            if verbose and created:
                self.stdout.write(f'  ‚úÖ Criada: {parada.nome}')
        
        if verbose:
            self.stdout.write(f'üìç {len(paradas_criadas)} paradas criadas/verificadas')
        
        return paradas_criadas

    def _criar_linhas_mock(self, verbose=False):
        """Cria linhas mock baseadas em linhas reais do DFTrans"""
        if verbose:
            self.stdout.write('üöå Criando linhas mock...')
        
        linhas_data = [
            # Linhas principais
            {
                'codigo': '0.111',
                'nome': 'Plano Piloto / Ceil√¢ndia Centro',
                'nome_curto': 'PP - Ceil√¢ndia',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Terminal Rodovi√°rio do Plano Piloto',
                'destino': 'Terminal Ceil√¢ndia Centro',
                'trajeto_descricao': 'Liga o centro de Bras√≠lia √† Ceil√¢ndia passando pelo Eixo Monumental',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '05:00',
                'ultimo_horario': '23:30',
                'intervalo_pico': 8,
                'intervalo_normal': 15,
                'tempo_viagem_estimado': 45,
                'tem_acessibilidade': True,
                'cor_linha': '#FF0000',
                'observacoes': 'Linha expressa com poucas paradas'
            },
            {
                'codigo': '0.030',
                'nome': 'Plano Piloto / Taguatinga',
                'nome_curto': 'PP - Taguatinga',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Terminal Rodovi√°rio do Plano Piloto',
                'destino': 'Terminal Taguatinga',
                'trajeto_descricao': 'Conecta Bras√≠lia a Taguatinga via EPTG',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '05:00',
                'ultimo_horario': '23:45',
                'intervalo_pico': 6,
                'intervalo_normal': 12,
                'tempo_viagem_estimado': 35,
                'tem_acessibilidade': True,
                'cor_linha': '#0000FF',
                'observacoes': 'Uma das linhas mais movimentadas'
            },
            {
                'codigo': '0.143',
                'nome': 'Ceil√¢ndia Centro / Taguatinga',
                'nome_curto': 'Ceil√¢ndia - Taguatinga',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Terminal Ceil√¢ndia Centro',
                'destino': 'Terminal Taguatinga',
                'trajeto_descricao': 'Liga as duas principais cidades sat√©lites',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '05:30',
                'ultimo_horario': '22:30',
                'intervalo_pico': 12,
                'intervalo_normal': 20,
                'tempo_viagem_estimado': 25,
                'tem_acessibilidade': True,
                'cor_linha': '#00FF00',
                'observacoes': 'Importante para integra√ß√£o entre cidades'
            },
            {
                'codigo': '0.108',
                'nome': 'Plano Piloto / Samambaia',
                'nome_curto': 'PP - Samambaia',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Terminal Rodovi√°rio do Plano Piloto',
                'destino': 'Terminal Samambaia',
                'trajeto_descricao': 'Liga Bras√≠lia a Samambaia',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '05:15',
                'ultimo_horario': '23:00',
                'intervalo_pico': 10,
                'intervalo_normal': 18,
                'tempo_viagem_estimado': 50,
                'tem_acessibilidade': True,
                'cor_linha': '#FF8000',
                'observacoes': 'Linha com trajeto mais longo'
            },
            {
                'codigo': '0.150',
                'nome': 'Plano Piloto / Gama',
                'nome_curto': 'PP - Gama',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Terminal Rodovi√°rio do Plano Piloto',
                'destino': 'Terminal Gama',
                'trajeto_descricao': 'Conecta Bras√≠lia ao Gama',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '05:00',
                'ultimo_horario': '22:45',
                'intervalo_pico': 15,
                'intervalo_normal': 25,
                'tempo_viagem_estimado': 55,
                'tem_acessibilidade': True,
                'cor_linha': '#800080',
                'observacoes': 'Atende regi√£o sul do DF'
            },
            
            # Linhas do Metr√¥
            {
                'codigo': 'METRO-1',
                'nome': 'Linha Laranja - Metr√¥ DF',
                'nome_curto': 'Metr√¥ Laranja',
                'tipo': TipoLinha.METRO,
                'status': StatusLinha.ATIVA,
                'origem': 'Esta√ß√£o Central',
                'destino': 'Esta√ß√£o Ceil√¢ndia Centro',
                'trajeto_descricao': 'Linha principal do metr√¥ conectando centro √†s cidades sat√©lites',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '06:00',
                'ultimo_horario': '23:30',
                'intervalo_pico': 4,
                'intervalo_normal': 8,
                'tempo_viagem_estimado': 30,
                'tem_acessibilidade': True,
                'cor_linha': '#FFA500',
                'observacoes': 'Sistema sobre trilhos'
            },
            
            # Linhas urbanas
            {
                'codigo': '0.201',
                'nome': 'Circular Asa Norte',
                'nome_curto': 'Circular AN',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Setor Comercial Norte',
                'destino': 'Setor Comercial Norte',
                'trajeto_descricao': 'Linha circular atendendo a Asa Norte',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '06:00',
                'ultimo_horario': '22:00',
                'intervalo_pico': 20,
                'intervalo_normal': 30,
                'tempo_viagem_estimado': 40,
                'tem_acessibilidade': False,
                'cor_linha': '#008080',
                'observacoes': 'Atende √°rea residencial'
            },
            {
                'codigo': '0.202',
                'nome': 'Circular Asa Sul',
                'nome_curto': 'Circular AS',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Setor Comercial Sul',
                'destino': 'Setor Comercial Sul',
                'trajeto_descricao': 'Linha circular atendendo a Asa Sul',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '06:00',
                'ultimo_horario': '22:00',
                'intervalo_pico': 20,
                'intervalo_normal': 30,
                'tempo_viagem_estimado': 45,
                'tem_acessibilidade': False,
                'cor_linha': '#4B0082',
                'observacoes': 'Atende √°rea residencial'
            },
            
            # Linhas especiais
            {
                'codigo': '0.900',
                'nome': 'Aeroporto / Plano Piloto',
                'nome_curto': 'Aeroporto Express',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Aeroporto Internacional de Bras√≠lia',
                'destino': 'Terminal Rodovi√°rio do Plano Piloto',
                'trajeto_descricao': 'Linha expressa para o aeroporto',
                'tarifa': Decimal('8.00'),
                'primeiro_horario': '05:00',
                'ultimo_horario': '23:00',
                'intervalo_pico': 30,
                'intervalo_normal': 45,
                'tempo_viagem_estimado': 35,
                'tem_acessibilidade': True,
                'cor_linha': '#FFD700',
                'observacoes': 'Linha expressa com tarifa diferenciada'
            },
            {
                'codigo': '0.801',
                'nome': 'UnB / Plano Piloto',
                'nome_curto': 'UnB Express',
                'tipo': TipoLinha.ONIBUS,
                'status': StatusLinha.ATIVA,
                'origem': 'Universidade de Bras√≠lia',
                'destino': 'Terminal Rodovi√°rio do Plano Piloto',
                'trajeto_descricao': 'Liga a UnB ao centro de Bras√≠lia',
                'tarifa': Decimal('5.50'),
                'primeiro_horario': '06:00',
                'ultimo_horario': '22:30',
                'intervalo_pico': 10,
                'intervalo_normal': 15,
                'tempo_viagem_estimado': 20,
                'tem_acessibilidade': True,
                'cor_linha': '#228B22',
                'observacoes': 'Alta demanda no per√≠odo letivo'
            }
        ]
        
        linhas_criadas = []
        for linha_data in linhas_data:
            linha, created = Linha.objects.get_or_create(
                codigo=linha_data['codigo'],
                defaults=linha_data
            )
            linhas_criadas.append(linha)
            
            if verbose and created:
                self.stdout.write(f'  üöå Criada: {linha.codigo} - {linha.nome}')
        
        if verbose:
            self.stdout.write(f'üöå {len(linhas_criadas)} linhas criadas/verificadas')
        
        return linhas_criadas

    def _criar_relacionamentos_mock(self, paradas, linhas, verbose=False):
        """Cria relacionamentos entre linhas e paradas"""
        if verbose:
            self.stdout.write('üîó Criando relacionamentos linha-parada...')
        
        # Mapear paradas por c√≥digo para facilitar a busca
        paradas_map = {p.codigo_dftrans: p for p in paradas}
        linhas_map = {l.codigo: l for l in linhas}
        
        # Definir relacionamentos linha-parada com ordem
        relacionamentos = [
            # Linha 0.111 - PP / Ceil√¢ndia
            ('0.111', [
                ('T001', 1), ('P001', 2), ('P002', 3), ('S001', 4), 
                ('M001', 5), ('M002', 6), ('S002', 7), ('T002', 8)
            ]),
            
            # Linha 0.030 - PP / Taguatinga  
            ('0.030', [
                ('T001', 1), ('P001', 2), ('P002', 3), ('S003', 4),
                ('M003', 5), ('P006', 6), ('T003', 7)
            ]),
            
            # Linha 0.143 - Ceil√¢ndia / Taguatinga
            ('0.143', [
                ('T002', 1), ('S002', 2), ('P005', 3), ('P006', 4), ('T003', 5)
            ]),
            
            # Linha 0.108 - PP / Samambaia
            ('0.108', [
                ('T001', 1), ('P001', 2), ('S001', 3), ('T003', 4), ('T004', 5)
            ]),
            
            # Linha 0.150 - PP / Gama
            ('0.150', [
                ('T001', 1), ('P002', 2), ('S001', 3), ('T005', 4)
            ]),
            
            # Metr√¥
            ('METRO-1', [
                ('M001', 1), ('M003', 2), ('M002', 3)
            ]),
            
            # Linha 0.201 - Circular Asa Norte
            ('0.201', [
                ('S003', 1), ('P003', 2), ('H001', 3), ('U001', 4), ('S003', 5)
            ]),
            
            # Linha 0.202 - Circular Asa Sul
            ('0.202', [
                ('P001', 1), ('P002', 2), ('S001', 3), ('P004', 4), ('P001', 5)
            ]),
            
            # Linha 0.900 - Aeroporto
            ('0.900', [
                ('A001', 1), ('S001', 2), ('T001', 3)
            ]),
            
            # Linha 0.801 - UnB
            ('0.801', [
                ('U001', 1), ('H001', 2), ('S003', 3), ('T001', 4)
            ])
        ]
        
        relacionamentos_criados = 0
        
        for codigo_linha, paradas_linha in relacionamentos:
            linha = linhas_map.get(codigo_linha)
            if not linha:
                if verbose:
                    self.stdout.write(f'  ‚ö†Ô∏è  Linha {codigo_linha} n√£o encontrada')
                continue
            
            for codigo_parada, ordem in paradas_linha:
                parada = paradas_map.get(codigo_parada)
                if not parada:
                    if verbose:
                        self.stdout.write(f'  ‚ö†Ô∏è  Parada {codigo_parada} n√£o encontrada')
                    continue
                
                linha_parada, created = LinhaParada.objects.get_or_create(
                    linha=linha,
                    parada=parada,
                    defaults={
                        'ordem': ordem,
                        'tempo_parada': 60,  # 1 minuto padr√£o
                        'distancia_origem': ordem * 2.5,  # Estimativa simples
                        'observacoes': f'Parada {ordem} da linha {codigo_linha}'
                    }
                )
                
                if created:
                    relacionamentos_criados += 1
                    if verbose:
                        self.stdout.write(
                            f'  üîó {linha.codigo} -> {parada.nome} (ordem {ordem})'
                        )
        
        if verbose:
            self.stdout.write(f'üîó {relacionamentos_criados} relacionamentos criados')

    def _exibir_estatisticas(self, verbose=False):
        """Exibe estat√≠sticas dos dados criados"""
        if not verbose:
            return
            
        total_paradas = Parada.objects.count()
        total_linhas = Linha.objects.count()
        total_relacionamentos = LinhaParada.objects.count()
        
        # Estat√≠sticas por tipo
        paradas_por_tipo = {}
        for tipo, nome in TipoParada.choices:
            count = Parada.objects.filter(tipo=tipo).count()
            if count > 0:
                paradas_por_tipo[nome] = count
        
        linhas_por_tipo = {}
        for tipo, nome in TipoLinha.choices:
            count = Linha.objects.filter(tipo=tipo).count()
            if count > 0:
                linhas_por_tipo[nome] = count
        
        self.stdout.write('\nüìä ESTAT√çSTICAS DOS DADOS MOCK:')
        self.stdout.write(f'  üìç Total de Paradas: {total_paradas}')
        for tipo, count in paradas_por_tipo.items():
            self.stdout.write(f'    - {tipo}: {count}')
        
        self.stdout.write(f'  üöå Total de Linhas: {total_linhas}')
        for tipo, count in linhas_por_tipo.items():
            self.stdout.write(f'    - {tipo}: {count}')
        
        self.stdout.write(f'  üîó Total de Relacionamentos: {total_relacionamentos}')
        
        # Paradas com mais movimento
        paradas_movimento = Parada.objects.filter(
            movimento_estimado__gt=0
        ).order_by('-movimento_estimado')[:5]
        
        if paradas_movimento:
            self.stdout.write('\nüèÉ Top 5 Paradas por Movimento:')
            for i, parada in enumerate(paradas_movimento, 1):
                self.stdout.write(
                    f'  {i}. {parada.nome}: {parada.movimento_estimado} passageiros/dia'
                )
        
        self.stdout.write('\n‚úÖ Dados mock prontos para uso!') 