"""
Comando de verifica√ß√£o de qualidade e otimiza√ß√£o do sistema BusFeed.
Executa an√°lises autom√°ticas e fornece relat√≥rios de sa√∫de do sistema.
"""
from django.core.management.base import BaseCommand, CommandError
from django.core.cache import cache
from django.db import connection
from django.conf import settings
import time
import logging
from routes.services import RouteService, RouteStatisticsService
from stops.services import StopService, StopStatisticsService
from schedules.services import ScheduleStatisticsService

logger = logging.getLogger('busfeed.management')


class Command(BaseCommand):
    """
    Comando para verifica√ß√£o autom√°tica da qualidade e performance do sistema.
    
    Uso:
        python manage.py check_quality [--verbose] [--fix-issues] [--performance-only]
    """
    
    help = 'Verifica qualidade do c√≥digo, performance e sa√∫de geral do sistema'
    
    def add_arguments(self, parser):
        """Adiciona argumentos espec√≠ficos do comando."""
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Exibe informa√ß√µes detalhadas da verifica√ß√£o',
        )
        parser.add_argument(
            '--fix-issues',
            action='store_true',
            help='Tenta corrigir automaticamente problemas encontrados',
        )
        parser.add_argument(
            '--performance-only',
            action='store_true',
            help='Executa apenas verifica√ß√µes de performance',
        )
        parser.add_argument(
            '--clear-cache',
            action='store_true',
            help='Limpa todo o cache do sistema',
        )
    
    def handle(self, *args, **options):
        """M√©todo principal do comando."""
        self.verbosity = int(options.get('verbosity', 1))
        self.verbose = options.get('verbose', False)
        self.fix_issues = options.get('fix_issues', False)
        self.performance_only = options.get('performance_only', False)
        self.clear_cache = options.get('clear_cache', False)
        
        self.stdout.write(
            self.style.SUCCESS('üîç Iniciando verifica√ß√£o de qualidade do BusFeed...\n')
        )
        
        try:
            # Limpar cache se solicitado
            if self.clear_cache:
                self._clear_system_cache()
            
            # Executar verifica√ß√µes
            results = {}
            
            if not self.performance_only:
                results.update(self._check_code_quality())
                results.update(self._check_database_health())
                results.update(self._check_data_integrity())
            
            results.update(self._check_performance())
            results.update(self._check_system_health())
            
            # Gerar relat√≥rio final
            self._generate_report(results)
            
            # Aplicar corre√ß√µes se solicitado
            if self.fix_issues:
                self._apply_fixes(results)
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Verifica√ß√£o conclu√≠da com sucesso!')
            )
            
        except Exception as e:
            logger.error(f'Erro durante verifica√ß√£o de qualidade: {e}')
            raise CommandError(f'Falha na verifica√ß√£o: {e}')
    
    def _clear_system_cache(self):
        """Limpa todo o cache do sistema."""
        self.stdout.write('üóëÔ∏è  Limpando cache do sistema...')
        
        try:
            cache.clear()
            self.stdout.write(
                self.style.SUCCESS('   ‚úì Cache limpo com sucesso')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'   ‚úó Erro ao limpar cache: {e}')
            )
    
    def _check_code_quality(self) -> dict:
        """Verifica qualidade do c√≥digo."""
        self.stdout.write('üìù Verificando qualidade do c√≥digo...')
        
        results = {
            'code_quality': {
                'score': 0,
                'issues': [],
                'recommendations': []
            }
        }
        
        try:
            # Verificar imports n√£o utilizados
            issues = []
            
            # Simular verifica√ß√µes (em um ambiente real, usar√≠amos ferramentas como flake8, pylint)
            score = 85  # Score base
            
            # Verificar estrutura de arquivos
            if self._check_file_structure():
                score += 5
                if self.verbose:
                    self.stdout.write('   ‚úì Estrutura de arquivos adequada')
            else:
                issues.append('Estrutura de arquivos inconsistente')
            
            # Verificar docstrings
            if self._check_docstrings():
                score += 5
                if self.verbose:
                    self.stdout.write('   ‚úì Documenta√ß√£o adequada')
            else:
                issues.append('Documenta√ß√£o insuficiente')
                results['code_quality']['recommendations'].append(
                    'Adicionar docstrings nas fun√ß√µes principais'
                )
            
            results['code_quality']['score'] = min(score, 100)
            results['code_quality']['issues'] = issues
            
            status = '‚úì' if score >= 80 else '‚ö†'
            self.stdout.write(f'   {status} Score de qualidade: {score}/100')
            
        except Exception as e:
            results['code_quality']['issues'].append(f'Erro na verifica√ß√£o: {e}')
            self.stdout.write(
                self.style.ERROR(f'   ‚úó Erro na verifica√ß√£o de c√≥digo: {e}')
            )
        
        return results
    
    def _check_database_health(self) -> dict:
        """Verifica sa√∫de do banco de dados."""
        self.stdout.write('üóÑÔ∏è  Verificando sa√∫de do banco de dados...')
        
        results = {
            'database_health': {
                'connection_time': 0,
                'query_performance': {},
                'issues': []
            }
        }
        
        try:
            # Testar tempo de conex√£o
            start_time = time.time()
            with connection.cursor() as cursor:
                cursor.execute("SELECT 1")
            connection_time = (time.time() - start_time) * 1000
            
            results['database_health']['connection_time'] = round(connection_time, 2)
            
            if connection_time < 10:
                self.stdout.write(f'   ‚úì Conex√£o r√°pida: {connection_time:.2f}ms')
            elif connection_time < 50:
                self.stdout.write(f'   ‚ö† Conex√£o aceit√°vel: {connection_time:.2f}ms')
            else:
                self.stdout.write(f'   ‚úó Conex√£o lenta: {connection_time:.2f}ms')
                results['database_health']['issues'].append('Conex√£o com banco lenta')
            
            # Testar queries principais
            self._test_query_performance(results)
            
        except Exception as e:
            results['database_health']['issues'].append(f'Erro de conex√£o: {e}')
            self.stdout.write(
                self.style.ERROR(f'   ‚úó Erro no banco: {e}')
            )
        
        return results
    
    def _test_query_performance(self, results: dict):
        """Testa performance de queries principais."""
        test_queries = [
            ('routes_list', 'SELECT COUNT(*) FROM routes_busroute WHERE is_active = true'),
            ('stops_list', 'SELECT COUNT(*) FROM stops_busstop WHERE is_active = true'),
            ('schedules_list', 'SELECT COUNT(*) FROM schedules_scheduleentry WHERE is_active = true'),
        ]
        
        for query_name, query in test_queries:
            try:
                start_time = time.time()
                with connection.cursor() as cursor:
                    cursor.execute(query)
                    cursor.fetchall()
                query_time = (time.time() - start_time) * 1000
                
                results['database_health']['query_performance'][query_name] = round(query_time, 2)
                
                if self.verbose:
                    status = '‚úì' if query_time < 100 else '‚ö†' if query_time < 500 else '‚úó'
                    self.stdout.write(f'   {status} {query_name}: {query_time:.2f}ms')
                
            except Exception as e:
                results['database_health']['issues'].append(f'Query {query_name} falhou: {e}')
    
    def _check_data_integrity(self) -> dict:
        """Verifica integridade dos dados."""
        self.stdout.write('üîç Verificando integridade dos dados...')
        
        results = {
            'data_integrity': {
                'orphaned_records': 0,
                'missing_coordinates': 0,
                'invalid_schedules': 0,
                'issues': []
            }
        }
        
        try:
            # Verificar registros √≥rf√£os usando services
            from routes.models import RouteStop
            from stops.models import BusStop
            
            # Paradas sem coordenadas
            missing_coords = BusStop.objects.filter(
                is_active=True,
                latitude__isnull=True
            ).count()
            
            results['data_integrity']['missing_coordinates'] = missing_coords
            
            if missing_coords > 0:
                results['data_integrity']['issues'].append(
                    f'{missing_coords} paradas sem coordenadas'
                )
                if self.verbose:
                    self.stdout.write(f'   ‚ö† {missing_coords} paradas sem coordenadas')
            else:
                if self.verbose:
                    self.stdout.write('   ‚úì Todas as paradas t√™m coordenadas')
            
            # Verificar rotas sem paradas
            routes_without_stops = RouteService.get_active_routes_queryset().filter(
                route_stops__isnull=True
            ).count()
            
            if routes_without_stops > 0:
                results['data_integrity']['issues'].append(
                    f'{routes_without_stops} rotas sem paradas'
                )
                if self.verbose:
                    self.stdout.write(f'   ‚ö† {routes_without_stops} rotas sem paradas')
            else:
                if self.verbose:
                    self.stdout.write('   ‚úì Todas as rotas t√™m paradas')
            
            integrity_score = 100 - (len(results['data_integrity']['issues']) * 10)
            status = '‚úì' if integrity_score >= 90 else '‚ö†' if integrity_score >= 70 else '‚úó'
            self.stdout.write(f'   {status} Score de integridade: {integrity_score}/100')
            
        except Exception as e:
            results['data_integrity']['issues'].append(f'Erro na verifica√ß√£o: {e}')
            self.stdout.write(
                self.style.ERROR(f'   ‚úó Erro na verifica√ß√£o de integridade: {e}')
            )
        
        return results
    
    def _check_performance(self) -> dict:
        """Verifica performance do sistema."""
        self.stdout.write('‚ö° Verificando performance do sistema...')
        
        results = {
            'performance': {
                'cache_hit_rate': 0,
                'service_response_times': {},
                'memory_usage': 0,
                'issues': []
            }
        }
        
        try:
            # Testar servi√ßos principais
            services_to_test = [
                ('route_statistics', RouteStatisticsService.get_route_statistics),
                ('stop_statistics', StopStatisticsService.get_stop_statistics),
                ('schedule_statistics', ScheduleStatisticsService.get_schedule_statistics),
            ]
            
            for service_name, service_func in services_to_test:
                start_time = time.time()
                try:
                    service_func()
                    response_time = (time.time() - start_time) * 1000
                    results['performance']['service_response_times'][service_name] = round(response_time, 2)
                    
                    if self.verbose:
                        status = '‚úì' if response_time < 500 else '‚ö†' if response_time < 2000 else '‚úó'
                        self.stdout.write(f'   {status} {service_name}: {response_time:.2f}ms')
                    
                except Exception as e:
                    results['performance']['issues'].append(f'Servi√ßo {service_name} falhou: {e}')
            
            # Verificar cache
            self._check_cache_performance(results)
            
        except Exception as e:
            results['performance']['issues'].append(f'Erro na verifica√ß√£o: {e}')
            self.stdout.write(
                self.style.ERROR(f'   ‚úó Erro na verifica√ß√£o de performance: {e}')
            )
        
        return results
    
    def _check_cache_performance(self, results: dict):
        """Verifica performance do cache."""
        try:
            # Testar cache b√°sico
            cache_key = 'test_performance_check'
            test_value = {'timestamp': time.time()}
            
            # Teste de escrita
            start_time = time.time()
            cache.set(cache_key, test_value, 60)
            write_time = (time.time() - start_time) * 1000
            
            # Teste de leitura
            start_time = time.time()
            cached_value = cache.get(cache_key)
            read_time = (time.time() - start_time) * 1000
            
            cache.delete(cache_key)
            
            if cached_value:
                if self.verbose:
                    self.stdout.write(f'   ‚úì Cache funcionando (W:{write_time:.2f}ms R:{read_time:.2f}ms)')
            else:
                results['performance']['issues'].append('Cache n√£o funcionando corretamente')
                
        except Exception as e:
            results['performance']['issues'].append(f'Erro no teste de cache: {e}')
    
    def _check_system_health(self) -> dict:
        """Verifica sa√∫de geral do sistema."""
        self.stdout.write('üè• Verificando sa√∫de geral do sistema...')
        
        results = {
            'system_health': {
                'overall_status': 'unknown',
                'component_status': {},
                'recommendations': []
            }
        }
        
        try:
            # Verificar status dos componentes usando services
            component_checks = {
                'routes': lambda: RouteStatisticsService.get_route_statistics(),
                'stops': lambda: StopStatisticsService.get_stop_statistics(),
                'schedules': lambda: ScheduleStatisticsService.get_schedule_statistics(),
            }
            
            healthy_components = 0
            total_components = len(component_checks)
            
            for component, check_func in component_checks.items():
                try:
                    stats = check_func()
                    results['system_health']['component_status'][component] = 'healthy'
                    healthy_components += 1
                    
                    if self.verbose:
                        self.stdout.write(f'   ‚úì {component.title()}: Saud√°vel')
                        
                except Exception as e:
                    results['system_health']['component_status'][component] = f'error: {e}'
                    if self.verbose:
                        self.stdout.write(f'   ‚úó {component.title()}: Erro')
            
            # Determinar status geral
            health_percentage = (healthy_components / total_components) * 100
            
            if health_percentage >= 90:
                results['system_health']['overall_status'] = 'healthy'
                status_icon = '‚úÖ'
            elif health_percentage >= 70:
                results['system_health']['overall_status'] = 'warning'
                status_icon = '‚ö†Ô∏è'
            else:
                results['system_health']['overall_status'] = 'critical'
                status_icon = 'üî¥'
            
            self.stdout.write(f'   {status_icon} Status geral: {results["system_health"]["overall_status"]} ({health_percentage:.1f}%)')
            
        except Exception as e:
            results['system_health']['overall_status'] = 'error'
            self.stdout.write(
                self.style.ERROR(f'   ‚úó Erro na verifica√ß√£o de sa√∫de: {e}')
            )
        
        return results
    
    def _check_file_structure(self) -> bool:
        """Verifica se a estrutura de arquivos est√° adequada."""
        # Implementa√ß√£o simplificada
        return True
    
    def _check_docstrings(self) -> bool:
        """Verifica se h√° documenta√ß√£o adequada."""
        # Implementa√ß√£o simplificada
        return True
    
    def _generate_report(self, results: dict):
        """Gera relat√≥rio final da verifica√ß√£o."""
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.SUCCESS('üìä RELAT√ìRIO DE QUALIDADE DO SISTEMA'))
        self.stdout.write('='*60)
        
        # Calcular score geral
        scores = []
        
        if 'code_quality' in results:
            score = results['code_quality']['score']
            scores.append(score)
            self.stdout.write(f'üìù Qualidade do C√≥digo: {score}/100')
        
        if 'database_health' in results:
            db_score = 100 - len(results['database_health']['issues']) * 20
            scores.append(max(db_score, 0))
            self.stdout.write(f'üóÑÔ∏è  Sa√∫de do Banco: {max(db_score, 0)}/100')
        
        if 'data_integrity' in results:
            integrity_score = 100 - len(results['data_integrity']['issues']) * 15
            scores.append(max(integrity_score, 0))
            self.stdout.write(f'üîç Integridade dos Dados: {max(integrity_score, 0)}/100')
        
        if 'performance' in results:
            perf_score = 100 - len(results['performance']['issues']) * 25
            scores.append(max(perf_score, 0))
            self.stdout.write(f'‚ö° Performance: {max(perf_score, 0)}/100')
        
        # Score geral
        overall_score = sum(scores) / len(scores) if scores else 0
        
        self.stdout.write('\n' + '-'*60)
        if overall_score >= 85:
            self.stdout.write(self.style.SUCCESS(f'üèÜ SCORE GERAL: {overall_score:.1f}/100 - EXCELENTE'))
        elif overall_score >= 70:
            self.stdout.write(self.style.WARNING(f'üëç SCORE GERAL: {overall_score:.1f}/100 - BOM'))
        else:
            self.stdout.write(self.style.ERROR(f'üëé SCORE GERAL: {overall_score:.1f}/100 - PRECISA MELHORAR'))
        
        # Listar problemas principais
        all_issues = []
        for category, data in results.items():
            if isinstance(data, dict) and 'issues' in data:
                all_issues.extend(data['issues'])
        
        if all_issues:
            self.stdout.write('\nüö® PROBLEMAS ENCONTRADOS:')
            for i, issue in enumerate(all_issues[:10], 1):
                self.stdout.write(f'  {i}. {issue}')
            
            if len(all_issues) > 10:
                self.stdout.write(f'  ... e mais {len(all_issues) - 10} problema(s)')
    
    def _apply_fixes(self, results: dict):
        """Aplica corre√ß√µes autom√°ticas quando poss√≠vel."""
        self.stdout.write('\nüîß Aplicando corre√ß√µes autom√°ticas...')
        
        fixes_applied = 0
        
        try:
            # Limpeza de cache para resolver problemas de performance
            if any('cache' in issue.lower() for category in results.values() 
                   if isinstance(category, dict) and 'issues' in category
                   for issue in category['issues']):
                cache.clear()
                self.stdout.write('   ‚úì Cache limpo para resolver problemas de performance')
                fixes_applied += 1
            
            # Outras corre√ß√µes autom√°ticas podem ser adicionadas aqui
            
            if fixes_applied > 0:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ {fixes_applied} corre√ß√£o(√µes) aplicada(s) com sucesso')
                )
            else:
                self.stdout.write('‚ÑπÔ∏è  Nenhuma corre√ß√£o autom√°tica dispon√≠vel')
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao aplicar corre√ß√µes: {e}')
            ) 