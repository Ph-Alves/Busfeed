# Generated by Django 4.2.7 on 2025-06-18 01:49

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('linhas', '0001_initial'),
        ('paradas', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Rota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome descritivo da rota', max_length=255)),
                ('descricao', models.TextField(blank=True, help_text='Descrição detalhada da rota')),
                ('origem_nome', models.CharField(help_text='Nome do local de origem', max_length=255)),
                ('origem_latitude', models.FloatField(help_text='Latitude da origem')),
                ('origem_longitude', models.FloatField(help_text='Longitude da origem')),
                ('destino_nome', models.CharField(help_text='Nome do local de destino', max_length=255)),
                ('destino_latitude', models.FloatField(help_text='Latitude do destino')),
                ('destino_longitude', models.FloatField(help_text='Longitude do destino')),
                ('tipo', models.CharField(choices=[('direct', 'Direta'), ('transfer', 'Com Baldeação'), ('walking', 'Caminhada'), ('mixed', 'Mista (Transporte + Caminhada)')], default='direct', help_text='Tipo da rota', max_length=15)),
                ('status', models.CharField(choices=[('active', 'Ativa'), ('inactive', 'Inativa'), ('temporary', 'Temporária'), ('maintenance', 'Em Manutenção')], default='active', help_text='Status operacional da rota', max_length=15)),
                ('tempo_total_estimado', models.PositiveIntegerField(help_text='Tempo total estimado em minutos', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(600)])),
                ('tempo_caminhada', models.PositiveIntegerField(default=0, help_text='Tempo de caminhada em minutos', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('tempo_transporte', models.PositiveIntegerField(default=0, help_text='Tempo no transporte público em minutos', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(480)])),
                ('tempo_espera', models.PositiveIntegerField(default=0, help_text='Tempo de espera estimado em minutos', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('distancia_total', models.FloatField(help_text='Distância total em quilômetros', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('distancia_caminhada', models.FloatField(default=0.0, help_text='Distância de caminhada em quilômetros', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('custo_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Custo total da viagem em reais', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('numero_baldeacoes', models.PositiveIntegerField(default=0, help_text='Número de baldeações necessárias', validators=[django.core.validators.MaxValueValidator(5)])),
                ('avaliacao_media', models.FloatField(blank=True, help_text='Avaliação média dos usuários (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('numero_avaliacoes', models.PositiveIntegerField(default=0, help_text='Número total de avaliações')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rota',
                'verbose_name_plural': 'Rotas',
                'ordering': ['-criado_em'],
            },
        ),
        migrations.CreateModel(
            name='RotaParada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_uso', models.CharField(choices=[('origem', 'Origem'), ('destino', 'Destino'), ('embarque', 'Embarque'), ('desembarque', 'Desembarque'), ('baldeacao', 'Baldeação'), ('passagem', 'Passagem')], help_text='Tipo de uso da parada na rota', max_length=15)),
                ('ordem', models.PositiveIntegerField(help_text='Ordem sequencial da parada na rota')),
                ('tempo_parada', models.PositiveIntegerField(default=0, help_text='Tempo de parada/espera em minutos', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)])),
                ('observacoes', models.TextField(blank=True, help_text='Observações sobre o uso desta parada na rota')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('parada', models.ForeignKey(help_text='Parada utilizada na rota', on_delete=django.db.models.deletion.CASCADE, to='paradas.parada')),
                ('rota', models.ForeignKey(help_text='Rota que utiliza esta parada', on_delete=django.db.models.deletion.CASCADE, to='rotas.rota')),
            ],
            options={
                'verbose_name': 'Rota-Parada',
                'verbose_name_plural': 'Rotas-Paradas',
                'ordering': ['rota', 'ordem'],
            },
        ),
        migrations.CreateModel(
            name='RotaLinha',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ordem', models.PositiveIntegerField(help_text='Ordem sequencial da linha na rota')),
                ('tempo_viagem', models.PositiveIntegerField(help_text='Tempo de viagem nesta etapa em minutos', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(240)])),
                ('distancia_percorrida', models.FloatField(help_text='Distância percorrida nesta etapa em quilômetros', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('linha', models.ForeignKey(help_text='Linha utilizada na rota', on_delete=django.db.models.deletion.CASCADE, to='linhas.linha')),
                ('parada_desembarque', models.ForeignKey(help_text='Parada de desembarque nesta linha', on_delete=django.db.models.deletion.CASCADE, related_name='desembarques_rota', to='paradas.parada')),
                ('parada_embarque', models.ForeignKey(help_text='Parada de embarque nesta linha', on_delete=django.db.models.deletion.CASCADE, related_name='embarques_rota', to='paradas.parada')),
                ('rota', models.ForeignKey(help_text='Rota que utiliza esta linha', on_delete=django.db.models.deletion.CASCADE, to='rotas.rota')),
            ],
            options={
                'verbose_name': 'Rota-Linha',
                'verbose_name_plural': 'Rotas-Linhas',
                'ordering': ['rota', 'ordem'],
            },
        ),
        migrations.AddIndex(
            model_name='rota',
            index=models.Index(fields=['tipo'], name='rotas_rota_tipo_70cd5f_idx'),
        ),
        migrations.AddIndex(
            model_name='rota',
            index=models.Index(fields=['status'], name='rotas_rota_status_fc0ee6_idx'),
        ),
        migrations.AddIndex(
            model_name='rota',
            index=models.Index(fields=['-criado_em'], name='rotas_rota_criado__c6e633_idx'),
        ),
        migrations.AddIndex(
            model_name='rotaparada',
            index=models.Index(fields=['rota', 'ordem'], name='rotas_rotap_rota_id_a1481b_idx'),
        ),
        migrations.AddIndex(
            model_name='rotaparada',
            index=models.Index(fields=['tipo_uso'], name='rotas_rotap_tipo_us_8475da_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rotaparada',
            unique_together={('rota', 'parada', 'tipo_uso')},
        ),
        migrations.AddIndex(
            model_name='rotalinha',
            index=models.Index(fields=['rota', 'ordem'], name='rotas_rotal_rota_id_661b95_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rotalinha',
            unique_together={('rota', 'ordem')},
        ),
    ]
