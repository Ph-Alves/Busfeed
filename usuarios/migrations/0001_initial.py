# Generated by Django 4.2.7 on 2025-06-18 01:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rotas', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telefone', models.CharField(blank=True, help_text='Número de telefone do usuário', max_length=20)),
                ('data_nascimento', models.DateField(blank=True, help_text='Data de nascimento', null=True)),
                ('endereco_principal', models.CharField(blank=True, help_text='Endereço principal do usuário', max_length=500)),
                ('tem_necessidades_especiais', models.BooleanField(default=False, help_text='Indica se o usuário tem necessidades especiais de acessibilidade')),
                ('prefere_acessibilidade', models.BooleanField(default=False, help_text='Prefere rotas e veículos acessíveis')),
                ('receber_notificacoes_email', models.BooleanField(default=True, help_text='Receber notificações por email')),
                ('receber_notificacoes_push', models.BooleanField(default=True, help_text='Receber notificações push')),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LocalFavorito',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Nome do local favorito', max_length=255)),
                ('endereco', models.CharField(help_text='Endereço do local', max_length=500)),
                ('categoria', models.CharField(choices=[('casa', 'Casa'), ('trabalho', 'Trabalho'), ('estudo', 'Estudo'), ('familia', 'Família'), ('lazer', 'Lazer'), ('saude', 'Saúde'), ('compras', 'Compras'), ('outro', 'Outro')], default='outro', help_text='Categoria do local', max_length=20)),
                ('descricao', models.TextField(blank=True, help_text='Descrição adicional do local')),
                ('cor_marcador', models.CharField(default='#FF0000', help_text='Cor do marcador em hexadecimal', max_length=7)),
                ('vezes_usado', models.PositiveIntegerField(default=0, help_text='Número de vezes que foi usado em buscas')),
                ('ultimo_uso', models.DateTimeField(blank=True, help_text='Data do último uso', null=True)),
                ('criado_em', models.DateTimeField(auto_now_add=True)),
                ('atualizado_em', models.DateTimeField(auto_now=True)),
                ('usuario', models.ForeignKey(help_text='Usuário dono do local favorito', on_delete=django.db.models.deletion.CASCADE, related_name='locais_favoritos', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Local Favorito',
                'verbose_name_plural': 'Locais Favoritos',
                'ordering': ['-ultimo_uso', '-vezes_usado', 'nome'],
                'indexes': [models.Index(fields=['usuario', 'categoria'], name='usuarios_lo_usuario_31b222_idx'), models.Index(fields=['ultimo_uso'], name='usuarios_lo_ultimo__c9e94a_idx')],
                'unique_together': {('usuario', 'nome')},
            },
        ),
        migrations.CreateModel(
            name='HistoricoBusca',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origem_nome', models.CharField(help_text='Nome do local de origem', max_length=255)),
                ('destino_nome', models.CharField(help_text='Nome do local de destino', max_length=255)),
                ('data_busca', models.DateTimeField(auto_now_add=True)),
                ('tempo_resposta', models.FloatField(blank=True, help_text='Tempo de resposta da busca em segundos', null=True)),
                ('numero_resultados', models.PositiveIntegerField(default=0, help_text='Número de rotas encontradas')),
                ('dispositivo', models.CharField(blank=True, help_text='Tipo de dispositivo usado', max_length=50)),
                ('user_agent', models.TextField(blank=True, help_text='User agent do navegador')),
                ('rota_selecionada', models.ForeignKey(blank=True, help_text='Rota que foi selecionada pelo usuário', null=True, on_delete=django.db.models.deletion.SET_NULL, to='rotas.rota')),
                ('usuario', models.ForeignKey(help_text='Usuário que realizou a busca', on_delete=django.db.models.deletion.CASCADE, related_name='historico_buscas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Histórico de Busca',
                'verbose_name_plural': 'Histórico de Buscas',
                'ordering': ['-data_busca'],
                'indexes': [models.Index(fields=['usuario', '-data_busca'], name='usuarios_hi_usuario_dbc509_idx'), models.Index(fields=['data_busca'], name='usuarios_hi_data_bu_95cdbc_idx')],
            },
        ),
        migrations.CreateModel(
            name='AvaliacaoRota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.PositiveIntegerField(help_text='Nota de 1 a 5', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comentario', models.TextField(blank=True, help_text='Comentário sobre a rota')),
                ('pontualidade', models.PositiveIntegerField(blank=True, help_text='Avaliação da pontualidade (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('conforto', models.PositiveIntegerField(blank=True, help_text='Avaliação do conforto (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('seguranca', models.PositiveIntegerField(blank=True, help_text='Avaliação da segurança (1-5)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('data_avaliacao', models.DateTimeField(auto_now_add=True)),
                ('data_viagem', models.DateField(blank=True, help_text='Data em que a viagem foi realizada', null=True)),
                ('aprovada', models.BooleanField(default=True, help_text='Indica se a avaliação foi aprovada')),
                ('denunciada', models.BooleanField(default=False, help_text='Indica se a avaliação foi denunciada')),
                ('rota', models.ForeignKey(help_text='Rota avaliada', on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes', to='rotas.rota')),
                ('usuario', models.ForeignKey(help_text='Usuário que fez a avaliação', on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Avaliação de Rota',
                'verbose_name_plural': 'Avaliações de Rotas',
                'ordering': ['-data_avaliacao'],
                'indexes': [models.Index(fields=['rota', '-data_avaliacao'], name='usuarios_av_rota_id_cf11c0_idx'), models.Index(fields=['aprovada'], name='usuarios_av_aprovad_6973ea_idx')],
                'unique_together': {('usuario', 'rota')},
            },
        ),
    ]
