#!/bin/bash

# BusFeed - Script de Deploy para ProduÃ§Ã£o
# Automatiza o processo de deploy da aplicaÃ§Ã£o

set -e  # Parar em caso de erro

echo "ðŸš€ Iniciando deploy do BusFeed para produÃ§Ã£o..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# FunÃ§Ã£o para log com cor
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    log_error "Arquivo .env nÃ£o encontrado!"
    log_info "Copie o arquivo env.prod.example para .env e configure as variÃ¡veis."
    exit 1
fi

# Verificar se Docker estÃ¡ rodando
if ! docker info > /dev/null 2>&1; then
    log_error "Docker nÃ£o estÃ¡ rodando!"
    exit 1
fi

# Verificar se docker-compose estÃ¡ disponÃ­vel
if ! command -v docker-compose &> /dev/null; then
    log_error "docker-compose nÃ£o estÃ¡ instalado!"
    exit 1
fi

log_info "Parando containers existentes..."
docker-compose -f docker-compose.prod.yml down

log_info "Removendo volumes antigos (se solicitado)..."
read -p "Deseja limpar volumes antigos? (isso apagarÃ¡ todos os dados) [y/N]: " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose -f docker-compose.prod.yml down -v
    log_warn "Volumes removidos!"
fi

log_info "Construindo imagens..."
docker-compose -f docker-compose.prod.yml build --no-cache

log_info "Iniciando serviÃ§os de banco de dados..."
docker-compose -f docker-compose.prod.yml up -d db redis

log_info "Aguardando banco de dados ficar pronto..."
sleep 30

log_info "Executando migraÃ§Ãµes..."
docker-compose -f docker-compose.prod.yml run --rm web python manage.py migrate

log_info "Coletando arquivos estÃ¡ticos..."
docker-compose -f docker-compose.prod.yml run --rm web python manage.py collectstatic --noinput

log_info "Criando superusuÃ¡rio (se necessÃ¡rio)..."
docker-compose -f docker-compose.prod.yml run --rm web python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(email='admin@busfeed.com').exists():
    User.objects.create_superuser('admin', 'admin@busfeed.com', 'admin123')
    print('SuperusuÃ¡rio criado: admin@busfeed.com / admin123')
else:
    print('SuperusuÃ¡rio jÃ¡ existe')
"

log_info "Iniciando todos os serviÃ§os..."
docker-compose -f docker-compose.prod.yml up -d

log_info "Aguardando serviÃ§os ficarem prontos..."
sleep 15

log_info "Verificando health checks..."
for i in {1..5}; do
    if curl -f http://localhost/health > /dev/null 2>&1; then
        log_info "âœ… Health check passou!"
        break
    else
        log_warn "Health check falhou, tentativa $i/5..."
        sleep 10
    fi
done

log_info "Mostrando status dos containers..."
docker-compose -f docker-compose.prod.yml ps

log_info "ðŸŽ‰ Deploy concluÃ­do com sucesso!"
log_info "Acesse a aplicaÃ§Ã£o em: http://localhost"
log_info "Admin em: http://localhost/admin"
log_info "API docs em: http://localhost/api/docs/"

echo
log_info "Para monitorar os logs, use:"
echo "docker-compose -f docker-compose.prod.yml logs -f"

echo
log_info "Para parar a aplicaÃ§Ã£o, use:"
echo "docker-compose -f docker-compose.prod.yml down" 