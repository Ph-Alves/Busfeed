# BusFeed - Dockerfile de Produção (Multi-stage)
# Imagem otimizada para produção com security hardening

# Stage 1: Build dependencies
FROM python:3.11-slim as builder

# Instalar dependências de compilação
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    gdal-bin \
    libgdal-dev \
    libpq-dev \
    libproj-dev \
    libgeos-dev \
    libjpeg-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Criar wheel das dependências Python
COPY requirements.txt /tmp/
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /tmp/wheels -r /tmp/requirements.txt

# Stage 2: Production image
FROM python:3.11-slim as production

# Criar usuário não-root para segurança
RUN groupadd -r django && useradd -r -g django django

# Instalar apenas dependências runtime necessárias
RUN apt-get update && apt-get install -y \
    gdal-bin \
    libgdal32 \
    libpq5 \
    libproj22 \
    libgeos-c1v5 \
    libjpeg62-turbo \
    zlib1g \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Instalar wheels criados no stage anterior
COPY --from=builder /tmp/wheels /wheels
RUN pip install --no-cache /wheels/*

# Criar diretórios necessários
RUN mkdir -p /app/staticfiles /app/media
WORKDIR /app

# Copiar código da aplicação
COPY . .

# Instalar gunicorn para produção
RUN pip install gunicorn==21.2.0

# Coletar arquivos estáticos
RUN python manage.py collectstatic --noinput

# Alterar proprietário dos arquivos para o usuário django
RUN chown -R django:django /app

# Mudar para usuário não-root
USER django

# Health check interno
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/health/ || exit 1

# Expor porta
EXPOSE 8000

# Comando padrão
CMD ["gunicorn", "busfeed.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120"] 